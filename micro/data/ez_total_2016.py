# will need this for the x axis labels
# start the function
def plot_ez_totals_2016(x,svgtitle, pngtitle ): #svgtitle, pngtitle
    # number of rows depends on the number of weeks
    rows = len(list(week_date16.keys()))
    weeks_l = list(week_date16.keys())
    # the number of columns depends on the number of locations
    cols = len(x) +1
    # this is the number of bars in each chart
    # this depends on the number of color groups
    ind = np.arange(5)#<--- this can be made a variable
    # the width of each bar
    # width one means there is no space between bars
    width = 1
    # assign appropriate colors per grop
    # note the index number of each color matches the index number of the values from the first fucntion
    colss = ['darkblue', 'dodgerblue', 'turquoise', 'pink', 'lightslategray']
    # set up the figure and the array of charts
    f, axar = plt.subplots(rows, cols, figsize=(18,20))
    # create some space in between the rows for x axis labels, and titles
    f.subplots_adjust(hspace=0.9, wspace=0.2)
    # run through the results generated by the previous fucntion
    for i, n in enumerate(x):
        # indentify the first column
        # assign a special value 'week number'
        if i == 0:
            # the values are stored in a list of dicts
            # so calling x[i] gives a dict
            for key, value in x[i].items():
                # the key is the place name
                # the value is the list of results
                # run through the list of results
                for j, k in enumerate(value):
                    # if i is zero (the first set of results)
                    # then the week number needs to be printed first
                    # because the first column is the week indentifier
                    axar[j, i].text(0, 0.5, weeks_l[j], fontsize=14)
                    axar[j, i].set_axis_off()
                    # if object in value is a dict then print it out
                    # numerical values were stored in a list
                    if type(k[0][weeks_l[j]]) == dict:
                        axar[j, i+1].text(0.2, 0.5, k[0][weeks_l[j]]['no_test'], fontsize=10)
                        axar[j, i+1].set_title(key)

                    # plot the numercal values in a bar chart
                    else:
                        # the i+1 shifts the column over..
                        # notice the values are called using the same variable as the week number column
                        # k[0][weeks_l[j]] <---- this is the list of color group averages per day
                        axar[j, i+1].bar(ind, k[0][weeks_l[j]], width, color=colss)
                        # the variable key is the place name,
                        # str(list(k[2].values())[0]) <--- this is the number of samples
                        # str(list(k[3].values())[0]) < ---- this is the dose
                        axar[j, i+1].set_title(key + ', samples: ' + str(list(k[3].values())[0]) + ', ' + str(list(k[2].values())[0]) + 'mL', loc='left')
                        # set the xaxis lable by calling any resluts below detectable limit
                        # list(k[1].values())[0] < ---- this the 'bdl' string
                        axis_label = '\n'.join(wrap(list(k[1].values())[0], 33))
                        axar[j, i+1].set_xlabel(list(k[1].keys())[0] +': '+ axis_label)
                        # set the max and the ming for the axis
                        if max(k[0][weeks_l[j]]) == 25:
                            axar[j, i+1].set_ylim(0, max(k[0][weeks_l[j]]) + 75)
                        else:
                            axar[j, i+1].set_ylim(0, max(k[0][weeks_l[j]]) + 10)
        # rinse and repeat for column values not equal to zero
        else:
            for key, value in x[i].items():
                for j, k in enumerate(value):
                    if type(k[0][weeks_l[j]]) == dict:
                        axar[j, i+1].text(0.2, 0.5, k[0][weeks_l[j]]['no_test'], fontsize=10)
                        axar[j, i+1].set_title(key)

                    else:
                        axar[j, i+1].bar(ind,  k[0][weeks_l[j]],width, color=colss)
                        axar[j, i+1].set_title(key + ', samples: ' + str(list(k[3].values())[0]) + ', ' + str(list(k[2].values())[0]) +'mL', loc='left')
                        axis_label = '\n'.join(wrap(list(k[1].values())[0], 33))
                        axar[j, i+1].set_xlabel(list(k[1].keys())[0] +': '+ axis_label)
                        if max(k[0][weeks_l[j]]) == 25:
                            axar[j, i+1].set_ylim(0, max(k[0][weeks_l[j]]) + 75)
                        else:
                            axar[j, i+1].set_ylim(0, max(k[0][weeks_l[j]]) + 10)

    plt.figure(figsize=(8.5, 11))
    plt.savefig(svgtitle)
    plt.savefig(pngtitle)
    plt.close()
    plt.show()
